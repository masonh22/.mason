# Inspired by https://github.com/holman/dotfiles bootstrap script

INSTALL_HOME=$1
shift

if [ -z "$INSTALL_HOME" ]; then
    echo 'install-utils must be given the root of the project as an argument'
    exit 1
fi

info() {
    printf "\r  [ \033[00;34m..\033[0m ] $@\n"
}

user() {
    printf "\r  [ \033[0;33m??\033[0m ] $@\n> "
}

success() {
    printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $@\n"
}

fail() {
    printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $@\n" 1>&2
}

do_op() {
    #echo "$@"
    $@ || exit
}

init_default_action=;
no_prompt=false
while [ $# -gt 0 ]; do
    case $1 in
        -d|--default-action)
            shift
            case $1 in
                S|s|O|o|B|b)
                    init_default_action=$1
                    ;;
                *)
                    fail "Invalid default action '$1' (must be s|o|b)"
                    exit 1
                    ;;
            esac
            ;;
        --no-prompt)
            no_prompt=true
            ;;
        *)
            fail "Unknown option '$1'"
            exit 1
            ;;
    esac
    shift
done

install_symlink() {
    if [ "$#" != 2 ]; then
        fail 'Internal error: install_symlink requires two arguments'
        fail "$@"
        return 1
    fi

    src="$1"
    dst="$2"

    action='clean' # no collision
    if [ -e "$dst" ] || [ -L "$dst" ]; then
        # check if there is a default action
        action="${default_action}"
        # override the action if the correct link already exists
        if [ "$(readlink $dst)" = "$src" ]; then
            action='s'
        elif [ -z "$action" ]; then
            user "File already exists: $dst ($(basename $src)), what to do? (caps applies the action to all remaining files)\n[s]kip, [o]verwrite, [b]ackup"
            read -n 1 action
        fi
    fi

    skip=false
    case "$action" in
        clean)
        # do nothing
            ;;
        S)
            default_action='s'
            skip=true
            ;;
        O)
            default_action='o'
            do_op rm -rf "$dst"
            ;;
        o)
            do_op rm -rf "$dst"
            ;;
        B)
            default_action='b'
            do_op mv "$dst" "${dst}.bak"
            ;;
        b)
            do_op mv "$dst" "${dst}.bak"
            ;;
        s|*)
            # skip by default
            skip=true
            ;;
    esac

    if [ "$skip" != "true" ]; then
        do_op ln -s "$src" "$dst"
        success "installed $dst"
    else
        success "skipped $dst"
    fi
}

install_symlinks() {
    info 'installing symlinks'

    default_action=$init_default_action

    for src in $(find $INSTALL_HOME \( -name .git -o -name emacs \) -prune -o -name '*.symlink.*' -print); do
        # files are named <file>.symlink.<rootdir> and get installed in
        # $HOME/<rootdir>/<file> unless <rootdir> is home, then $HOME/<file>
        root_dir="${src#*.symlink.}/"
        if [ "$root_dir" = 'home/' ]; then
            root_dir=
        else
            do_op mkdir -p "$HOME/$root_dir"
        fi
        dst="$HOME/${root_dir}$(basename ${src%.symlink.*})"

        install_symlink $src $dst
    done
}

install_copies() {
    info 'copying files'

    default_action=$init_default_action

    for src in $(find $INSTALL_HOME \( -name .git -o -name emacs \) -prune -o -name '*.copy.*' -print); do
        # files are named <file>.copy.<rootdir> and get copied in
        # $HOME/<rootdir>/<file> unless <rootdir> is home, then $HOME/<file>
        root_dir="${src#*.copy.}/"
        if [ "$root_dir" = 'home/' ]; then
            root_dir=
        else
            do_op mkdir -p "$HOME/$root_dir"
        fi
        dst="$HOME/${root_dir}$(basename ${src%.copy.*})"

        action='clean' # no collision
        if [ -e "$dst" ] || [ -L "$dst" ]; then
            # check if there is a default action
            action="${default_action}"
            if [ -z "$action" ]; then
                user "File already exists: $dst ($(basename $src)), what to do? (caps applies the action to all remaining files)\n[s]kip, [o]verwrite, [b]ackup"
                read -n 1 action
            fi
        fi

        skip=false
        case "$action" in
            clean)
                # do nothing
                ;;
            S)
                default_action='s'
                skip=true
                ;;
            O)
                default_action='o'
                do_op rm -rf "$dst"
                ;;
            o)
                do_op rm -rf "$dst"
                ;;
            B)
                default_action='b'
                do_op mv "$dst" "${dst}.bak"
                ;;
            b)
                do_op mv "$dst" "${dst}.bak"
                ;;
            s|*)
                # skip by default
                skip=true
                ;;
        esac

        if [ "$skip" != "true" ]; then
            do_op cp "$src" "$dst"
            success "installed $dst"
        else
            success "skipped $dst"
        fi
    done
}

add_to_rc() {
    ENV_NAME="$1"
    ENV_HOME_NAME="$2"
    if [ -z "${ENV_NAME}" ] || [ -z "${ENV_HOME_NAME}" ]; then
        echo 'Usage: add_to_rc <rc-name> <project-name>'
        return 1
    fi

    if ! grep "${ENV_HOME_NAME}" "${HOME}/${ENV_NAME}" > /dev/null 2>&1; then
        if $no_prompt; then
            yes_no=y
        else
            user "Add '${ENV_HOME_NAME}' to ~/${ENV_NAME}? [Y/n]"
            read -e yes_no
        fi
        case "$yes_no" in
            n*|N*)
                success "Skipped modifying ~/${ENV_NAME}"
                ;;
            *)
                echo '' >> ${HOME}/${ENV_NAME}
                echo "export ${ENV_HOME_NAME}=${INSTALL_HOME}" >> ${HOME}/${ENV_NAME}
                echo "source \${${ENV_HOME_NAME}}/env" >> ${HOME}/${ENV_NAME}
                success "Modified ~/${ENV_NAME}"
                ;;
        esac
    else
        success "~/${ENV_NAME} is already configured"
    fi
}

add_to_config() {
    CONFIG_NAME="$1"
    ENV_HOME_NAME="$2"
    if [ -z "${CONFIG_NAME}" ] || [ -z "${ENV_HOME_NAME}" ]; then
        echo 'Usage: add_to_config <config-name> <project-name>'
        return 1
    fi

    CONFIG_DIR="${XDG_CONFIG_HOME:-${HOME}/.config}/${CONFIG_NAME}"
    if [ -d "${CONFIG_DIR}" ] && ! grep -r "${ENV_HOME_NAME}" "${CONFIG_DIR}" > /dev/null 2>&1; then
        if $no_prompt; then
            yes_no=y
        else
            user "Add '${ENV_HOME_NAME}' to ~/.config/${CONFIG_NAME}? [Y/n]"
            read -e yes_no
        fi
        case "$yes_no" in
            n*|N*)
                success "Skipped modifying ~/.config/${CONFIG_NAME}"
                ;;
            *)
                echo '' >> ${CONFIG_DIR}/config
                echo "include ${ENV_HOME_NAME}/${CONFIG_NAME}/config" >> ${HOME}/${CONFIG_NAME}
                success "Modified ~/.config/${CONFIG_NAME}"
                ;;
        esac
    else
        success "~/.config/${CONFIG_NAME} is already configured"
    fi
}

add_to_bashrc() {
    if [ -z "$1" ]; then
        echo 'Usage: add_to_bashrc <project-name>'
        return 1
    fi

    add_to_rc .bashrc "$1"
}

get_emacs_home() {
    if [ -d "${HOME}/.config/emacs" ]; then
        echo "${HOME}/.config/emacs"
    elif [ -d "${HOME}/.emacs.d" ]; then
        echo "${HOME}/.emacs.d"
    else
        mkdir -p "${HOME}/.config/emacs"
        echo "${HOME}/.config/emacs"
    fi
}

add_to_emacs() {
    EMACS_PACKAGE_NAME=$1
    if [ -z "${EMACS_PACKAGE_NAME}" ]; then
        echo 'Usage: add_to_emacs <package-name>'
        return 1
    fi

    EMACS_HOME="$(get_emacs_home)"
    ret=$?
    if [ $ret != 0 ]; then
        return $ret
    fi

    if ! grep "${EMACS_PACKAGE_NAME}" ${EMACS_HOME}/init.el > /dev/null 2>&1; then
        if $no_prompt; then
            yes_no=y
        else
            user "Add package '${EMACS_PACKAGE_NAME}' to ${EMACS_HOME}/init.el? [Y/n]"
            read -e yes_no
        fi
        case "$yes_no" in
            n*|N*)
                success "Skipped modifying ${EMACS_HOME}/init.el"
                ;;
            *)
                echo '' >> ${EMACS_HOME}/init.el
                echo "(add-to-list 'load-path \"${INSTALL_HOME}/emacs/\")" >> ${EMACS_HOME}/init.el
                echo "(require '${EMACS_PACKAGE_NAME})" >> ${EMACS_HOME}/init.el
                success "Modified ${EMACS_HOME}/init.el"
                ;;
        esac
    else
        success 'Skipping emacs configuration - already configured'
    fi
}
